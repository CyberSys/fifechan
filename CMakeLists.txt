CMAKE_MINIMUM_REQUIRED(VERSION 2.6.0)

# Path to local modules
SET(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/CMake/Modules)

PROJECT(fifechan)

SET(MAJOR_VERSION 0)
SET(MINOR_VERSION 1)
SET(PATCH_LEVEL 2)
SET(${PROJECT_NAME}_SOVERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_LEVEL})
SET(${PROJECT_NAME}_VERSION ${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_LEVEL})
SET(LIB_SUFFIX "" CACHE STRING "Suffix to append to the system lib folder")

INCLUDE_DIRECTORIES("${PROJECT_SOURCE_DIR}/source")

# The Fifechan core library 
FILE(GLOB FIFECHAN_HEADER source/fifechan.hpp)
FILE(GLOB FIFECHAN_HEADERS
  source/fifechan/actionevent.hpp		
  source/fifechan/actionlistener.hpp		
  source/fifechan/cliprectangle.hpp	
  source/fifechan/color.hpp		
  source/fifechan/containerevent.hpp		
  source/fifechan/containerlistener.hpp		
  source/fifechan/deathlistener.hpp	
  source/fifechan/defaultfont.hpp		
  source/fifechan/event.hpp		
  source/fifechan/exception.hpp		
  source/fifechan/focushandler.hpp	
  source/fifechan/focuslistener.hpp	
  source/fifechan/font.hpp		
  source/fifechan/genericinput.hpp	
  source/fifechan/glut.hpp		
  source/fifechan/graphics.hpp		
  source/fifechan/gui.hpp			
  source/fifechan/image.hpp		
  source/fifechan/imagefont.hpp		
  source/fifechan/imageloader.hpp		
  source/fifechan/input.hpp		
  source/fifechan/inputevent.hpp		
  source/fifechan/key.hpp			
  source/fifechan/keyevent.hpp		
  source/fifechan/keyinput.hpp		
  source/fifechan/keylistener.hpp		
  source/fifechan/listmodel.hpp		
  source/fifechan/mouseevent.hpp		
  source/fifechan/mouseinput.hpp		
  source/fifechan/mouselistener.hpp	
  source/fifechan/platform.hpp		
  source/fifechan/rectangle.hpp		
  source/fifechan/selectionevent.hpp	
  source/fifechan/selectionlistener.hpp	
  source/fifechan/text.hpp
  source/fifechan/utf8stringeditor.hpp
  source/fifechan/visibilityeventhandler.hpp
  source/fifechan/widget.hpp		
  source/fifechan/widgetlistener.hpp
  source/fifechan/opengl.hpp
)
FILE(GLOB FIFECHAN_WIDGET_HEADERS source/fifechan/widgets/*.hpp)
FILE(GLOB FIFECHAN_CONTRIB_WIDGET_HEADERS source/fifechan/contrib/widgets/*.hpp)
FILE(GLOB FIFECHAN_SRC source/fifechan/*.cpp)
FILE(GLOB FIFECHAN_WIDGET_SRC source/fifechan/widgets/*.cpp)
FILE(GLOB FIFECHAN_CONTRIB_WIDGET_SRC source/fifechan/contrib/widgets/*.cpp)

# Grouping of the source for nicer display in IDEs such as Visual Studio
SOURCE_GROUP(source FILES ${FIFECHAN_HEADER})
SOURCE_GROUP(source/fifechan FILES ${FIFECHAN_HEADERS} ${FIFECHAN_SRC})
SOURCE_GROUP(source/fifechan/widgets FILES ${FIFECHAN_WIDGET_HEADERS} ${FIFECHAN_WIDGET_SRC})
SOURCE_GROUP(source/fifechan/contrib/widgets FILES ${FIFECHAN_CONTRIB_WIDGET_HEADERS} ${FIFECHAN_CONTRIB_WIDGET_SRC})

OPTION(BUILD_FIFECHAN_SHARED "Build the Fifechan core library as a shared library." ON)
IF(BUILD_FIFECHAN_SHARED)
  SET(FIFECHAN_LIBRARY_TYPE SHARED)
ELSE(BUILD_FIFECHAN_SHARED)
  SET(FIFECHAN_LIBRARY_TYPE STATIC)
ENDIF(BUILD_FIFECHAN_SHARED)
ADD_LIBRARY(${PROJECT_NAME} ${FIFECHAN_LIBRARY_TYPE} 
	${FIFECHAN_HEADER} 
	${FIFECHAN_HEADERS} 
	${FIFECHAN_WIDGET_HEADERS} 
	${FIFECHAN_CONTRIB_WIDGET_HEADERS}
	${FIFECHAN_CONTRIB_WIDGET_SRC}
	${FIFECHAN_SRC} 
	${FIFECHAN_WIDGET_SRC})
ADD_CUSTOM_TARGET(lib DEPENDS ${PROJECT_NAME}) # Create symlink
SET_TARGET_PROPERTIES(${PROJECT_NAME} PROPERTIES
   VERSION ${${PROJECT_NAME}_VERSION}
   SOVERSION ${${PROJECT_NAME}_SOVERSION}
   CLEAN_DIRECT_OUTPUT 1 # Allow creating static and shared libraries without conflict
   OUTPUT_NAME ${PROJECT_NAME}  # Avoid conflicts between library and binary target names 
   COMPILE_DEFINITIONS "FIFECHAN_BUILD"
   )
INSTALL(TARGETS ${PROJECT_NAME} DESTINATION lib${LIB_SUFFIX} PERMISSIONS
  OWNER_READ OWNER_WRITE OWNER_EXECUTE
  GROUP_READ GROUP_EXECUTE
  WORLD_READ WORLD_EXECUTE)
INSTALL(FILES ${FIFECHAN_HEADER} DESTINATION include/)
INSTALL(FILES ${FIFECHAN_HEADERS} DESTINATION include/fifechan/)
INSTALL(FILES ${FIFECHAN_WIDGET_HEADERS} DESTINATION include/fifechan/widgets/)
INSTALL(FILES ${FIFECHAN_CONTRIB_WIDGET_HEADERS} DESTINATION include/fifechan/contrib/widgets/)

#REMOVE_DEFINITIONS("-DFIFECHAN_BUILD")
#ADD_DEFINITIONS("-DFIFECHAN_EXTENSION_BUILD")

# The Fifechan Allegro extension library
OPTION(ENABLE_ALLEGRO "Enable the Fifechan Allegro extension" ON)
OPTION(BUILD_FIFECHAN_ALLEGRO_SHARED "Build the Fifechan Allegro extension library as a shared library." ON)
FIND_PACKAGE(Allegro)
IF(ENABLE_ALLEGRO AND ALLEGRO_FOUND)  

  INCLUDE_DIRECTORIES(${ALLEGRO_INCLUDE_DIR})

  # The Fifechan Allegro extension source
  FILE(GLOB FIFECHAN_ALLEGRO_HEADERS source/fifechan/allegro/*.hpp)
  FILE(GLOB FIFECHAN_ALLEGRO_CONTRIB_HEADERS source/fifechan/contrib/allegro/*.hpp)
  FILE(GLOB FIFECHAN_ALLEGRO_SRC source/fifechan/allegro/*.cpp)
  FILE(GLOB FIFECHAN_ALLEGRO_CONTRIB_SRC source/fifechan/contrib/allegro/*.cpp)

  # Grouping of the source for nicer display in IDEs such as Visual Studio
  SOURCE_GROUP(source/fifechan/allegro FILES ${FIFECHAN_ALLEGRO_HEADERS} ${FIFECHAN_ALLEGRO_SRC})
  SOURCE_GROUP(source/fifechan/contrib/allegro FILES ${FIFECHAN_ALLEGRO_CONTRIB_HEADERS} ${FIFECHAN_ALLEGRO_CONTRIB_SRC})

  IF(BUILD_FIFECHAN_ALLEGRO_SHARED)
    SET(FIFECHAN_ALLEGRO_LIBRARY_TYPE SHARED)
   ELSE(BUILD_FIFECHAN_ALLEGRO_SHARED)
     SET(FIFECHAN_ALLEGRO_LIBRARY_TYPE STATIC)
   ENDIF(BUILD_FIFECHAN_ALLEGRO_SHARED)
   ADD_LIBRARY(${PROJECT_NAME}_allegro ${FIFECHAN_ALLEGRO_LIBRARY_TYPE} 
	${FIFECHAN_ALLEGRO_HEADERS}
	${FIFECHAN_ALLEGRO_CONTRIB_HEADERS}
	${FIFECHAN_ALLEGRO_SRC})
   IF(WIN32)
     TARGET_LINK_LIBRARIES(${PROJECT_NAME}_allegro ${ALLEG_LIBRARY} ${PROJECT_NAME})
   ENDIF(WIN32)
   ADD_CUSTOM_TARGET(allegrolib DEPENDS ${PROJECT_NAME}_allegro) # Create symlink
   SET_TARGET_PROPERTIES(${PROJECT_NAME}_allegro PROPERTIES
     VERSION ${${PROJECT_NAME}_VERSION}
     SOVERSION ${${PROJECT_NAME}_SOVERSION}
     CLEAN_DIRECT_OUTPUT 1 # Allow creating static and shared libraries without conflict
     OUTPUT_NAME ${PROJECT_NAME}_allegro # Avoid conflicts between library and binary target names 
     COMPILE_DEFINITIONS "FIFECHAN_EXTENSION_BUILD"
     )

   INSTALL(TARGETS ${PROJECT_NAME}_allegro DESTINATION lib${LIB_SUFFIX} PERMISSIONS
     OWNER_READ OWNER_WRITE OWNER_EXECUTE
     GROUP_READ GROUP_EXECUTE
     WORLD_READ WORLD_EXECUTE)
   INSTALL(FILES ${FIFECHAN_ALLEGRO_HEADERS} DESTINATION include/fifechan/allegro/)
   INSTALL(FILES ${FIFECHAN_ALLEGRO_CONTRIB_HEADERS} DESTINATION include/fifechan/contrib/allegro/)   
ENDIF(ENABLE_ALLEGRO AND ALLEGRO_FOUND)

# The Fifechan Irrlicht extension library
OPTION(ENABLE_IRRLICHT "Enable the Fifechan Irrlicht extension" ON)
OPTION(BUILD_FIFECHAN_IRRLICHT_SHARED "Build the Fifechan Irrlicht extension library as a shared library." ON)
FIND_PACKAGE(Irrlicht)
IF(ENABLE_IRRLICHT AND IRRLICHT_FOUND)

  INCLUDE_DIRECTORIES(${IRRLICHT_INCLUDE_DIR})

  # The Fifechan Irrlicht extension source
  FILE(GLOB FIFECHAN_IRRLICHT_HEADERS source/fifechan/irrlicht/*.hpp)
  FILE(GLOB FIFECHAN_IRRLICHT_SRC source/fifechan/irrlicht/*.cpp)

  # Grouping of the source for nicer display in IDEs such as Visual Studio
  SOURCE_GROUP(source/fifechan/irrlicht FILES ${FIFECHAN_IRRLICHT_HEADERS} ${FIFECHAN_IRRLICHT_SRC})

  IF(BUILD_FIFECHAN_IRRLICHT_SHARED)
    SET(FIFECHAN_IRRLICHT_LIBRARY_TYPE SHARED)
   ELSE(BUILD_FIFECHAN_IRRLICHT_SHARED)
     SET(FIFECHAN_IRRLICHT_LIBRARY_TYPE STATIC)
   ENDIF(BUILD_FIFECHAN_IRRLICHT_SHARED)
   ADD_LIBRARY(${PROJECT_NAME}_irrlicht ${FIFECHAN_IRRLICHT_LIBRARY_TYPE}
        ${FIFECHAN_IRRLICHT_HEADERS}
        ${FIFECHAN_IRRLICHT_SRC})
   IF(WIN32)
     TARGET_LINK_LIBRARIES(${PROJECT_NAME}_irrlicht ${IRRLICHT_LIBRARY} ${PROJECT_NAME})
   ENDIF(WIN32)
   ADD_CUSTOM_TARGET(irrlichtlib DEPENDS ${PROJECT_NAME}_irrlicht) # Create symlink
   SET_TARGET_PROPERTIES(${PROJECT_NAME}_irrlicht PROPERTIES
     VERSION ${${PROJECT_NAME}_VERSION}
     SOVERSION ${${PROJECT_NAME}_SOVERSION}
     CLEAN_DIRECT_OUTPUT 1 # Allow creating static and shared libraries without conflict
     OUTPUT_NAME ${PROJECT_NAME}_irrlicht # Avoid conflicts between library and binary target names
     COMPILE_DEFINITIONS "FIFECHAN_EXTENSION_BUILD"
     )

   INSTALL(TARGETS ${PROJECT_NAME}_irrlicht DESTINATION lib${LIB_SUFFIX} PERMISSIONS
     OWNER_READ OWNER_WRITE OWNER_EXECUTE
     GROUP_READ GROUP_EXECUTE
     WORLD_READ WORLD_EXECUTE)
   INSTALL(FILES ${FIFECHAN_IRRLICHT_HEADERS} DESTINATION include/fifechan/irrlicht/)
ENDIF(ENABLE_IRRLICHT AND IRRLICHT_FOUND)

# The Fifechan OpenGL extension library
OPTION(ENABLE_OPENGL "Enable the Fifechan OpenGL extension" ON)
OPTION(ENABLE_OPENGL_CONTRIB "Enabled the Fifechan OpenGL Contrib extension" OFF)
OPTION(BUILD_FIFECHAN_OPENGL_SHARED "Build the Fifechan OpenGL extension library as a shared library." ON)
FIND_PACKAGE(OpenGL)

IF(APPLE AND ENABLE_OPENGL)
  FIND_LIBRARY(OPENGL_LIBRARY OpenGL)
  MARK_AS_ADVANCED(OPENGL_LIBRARY)
  SET(EXTRA_LIBS ${OPENGL_LIBRARY})
ENDIF(APPLE AND ENABLE_OPENGL)

IF(ENABLE_OPENGL_CONTRIB)
  FIND_PACKAGE(Freetype)
  FIND_PACKAGE(OGLFT)
ENDIF(ENABLE_OPENGL_CONTRIB)

IF(ENABLE_OPENGL AND OPENGL_FOUND)

  INCLUDE_DIRECTORIES(${OPENGL_INCLUDE_DIR})
  IF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND AND FREETYPE_FOUND)
    INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})
    INCLUDE_DIRECTORIES(${OGLFT_INCLUDE_DIRS})
  ENDIF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND AND FREETYPE_FOUND)

  # The OpenGL extension source
#  FILE(GLOB OGLFT_FOUNDFIFECHAN_OPENGL_HEADER source/fifechan/opengl.hpp)
  FILE(GLOB FIFECHAN_OPENGL_HEADERS source/fifechan/opengl/*.hpp)
  FILE(GLOB FIFECHAN_OPENGL_SRC source/fifechan/opengl/*.cpp)
  IF(ENABLE_OPENGL_CONTRIB)
  FILE(GLOB FIFECHAN_OPENGL_CONTRIB_SRC source/fifechan/contrib/opengl/*.cpp)
  FILE(GLOB FIFECHAN_OPENGL_CONTRIB_HEADERS source/fifechan/contrib/opengl/*.hpp)
  ENDIF(ENABLE_OPENGL_CONTRIB)

  # Grouping of the source for nicer display in IDEs such as Visual Studio
  SOURCE_GROUP(source/fifechan/opengl FILES ${FIFECHAN_OPENGL_HEADERS} ${FIFECHAN_OPENGL_SRC})
  SOURCE_GROUP(source/fifechan/contrib/opengl FILES ${FIFECHAN_OPENGL_CONTRIB_HEADERS} ${FIFECHAN_OPENGL_CONTRIB_SRC})

  IF(BUILD_FIFECHAN_OPENGL_SHARED)
    SET(FIFECHAN_OPENGL_LIBRARY_TYPE SHARED)
  ELSE(BUILD_FIFECHAN_OPENGL_SHARED)
    SET(FIFECHAN_OPENGL_LIBRARY_TYPE STATIC)
  ENDIF(BUILD_FIFECHAN_OPENGL_SHARED)
  ADD_LIBRARY(${PROJECT_NAME}_opengl ${FIFECHAN_OPENGL_LIBRARY_TYPE} 
	${FIFECHAN_OPENGL_HEADERS}
	${FIFECHAN_OPENGL_CONTRIB_HEADERS}
	${FIFECHAN_OPENGL_SRC}
	${FIFECHAN_OPENGL_CONTRIB_SRC})
  IF(WIN32)
    IF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_opengl ${OPENGL_LIBRARY} ${FREETYPE_LIBRARIES} ${OGLFT_LIBRARIES} ${PROJECT_NAME})
    ELSE(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_opengl ${OPENGL_LIBRARY} ${PROJECT_NAME})
    ENDIF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
  ENDIF(WIN32)
  IF(APPLE)
    IF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_opengl ${OPENGL_LIBRARY} ${FREETYPE_LIBRARIES} ${OGLFT_LIBRARIES} ${PROJECT_NAME})
    ELSE(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_opengl ${OPENGL_LIBRARY} ${PROJECT_NAME})
    ENDIF(ENABLE_OPENGL_CONTRIB AND OGLFT_FOUND)
  ENDIF(APPLE)

  ADD_CUSTOM_TARGET(opengllib DEPENDS ${PROJECT_NAME}_opengl) # Create symlink
  SET_TARGET_PROPERTIES(${PROJECT_NAME}_opengl PROPERTIES
    VERSION ${${PROJECT_NAME}_VERSION}
    SOVERSION ${${PROJECT_NAME}_SOVERSION}
    CLEAN_DIRECT_OUTPUT 1 # Allow creating static and shared libraries without conflict
    OUTPUT_NAME ${PROJECT_NAME}_opengl # Avoid conflicts between library and binary target names 
    COMPILE_DEFINITIONS "FIFECHAN_EXTENSION_BUILD"
    )

  INSTALL(TARGETS ${PROJECT_NAME}_opengl DESTINATION lib${LIB_SUFFIX} PERMISSIONS
    OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE)
  INSTALL(FILES ${FIFECHAN_OPENGL_HEADERS} DESTINATION include/fifechan/opengl/)
  INSTALL(FILES ${FIFECHAN_OPENGL_CONTRIB_HEADERS} DESTINATION include/fifechan/contrib/opengl/)   
ENDIF(ENABLE_OPENGL AND OPENGL_FOUND)

# The Fifechan SDL extension library
OPTION(ENABLE_SDL "Enable the Fifechan SDL extension" ON)
OPTION(ENABLE_SDL_CONTRIB "Enable the Fifechan SDL contrib extension" OFF)
OPTION(BUILD_FIFECHAN_SDL_SHARED "Build the Fifechan SDL extension library as a shared library." ON)
FIND_PACKAGE(SDL2)
FIND_PACKAGE(SDL2_image)
IF(ENABLE_SDL_CONTRIB)
FIND_PACKAGE(SDL2_ttf)
ENDIF(ENABLE_SDL_CONTRIB)

IF(APPLE AND ENABLE_SDL)
  FIND_LIBRARY(SDL2_LIBRARY SDL2)
  FIND_LIBRARY(SDL2_IMAGE_LIBRARY SDL2_image)
  MARK_AS_ADVANCED(SDL2_LIBRARY SDL2_IMAGE_LIBRARY)
  SET(EXTRA_LIBS ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY})
ENDIF(APPLE AND ENABLE_SDL)
IF(ENABLE_SDL AND SDL2_FOUND AND SDL2_IMAGE_FOUND)  
 
  INCLUDE_DIRECTORIES(${SDL2_INCLUDE_DIR} ${SDL2_IMAGE_INCLUDE_DIR})
 
  # The Fifechan SDL extension source
  FILE(GLOB FIFECHAN_SDL_HEADERS source/fifechan/sdl/*.hpp)
  FILE(GLOB FIFECHAN_SDL_CONTRIB_HEADERS source/fifechan/contrib/sdl/*.hpp)
  FILE(GLOB FIFECHAN_SDL_SRC source/fifechan/sdl/*.cpp)
  IF(ENABLE_SDL_CONTRIB AND SDLTTF_FOUND)
  INCLUDE_DIRECTORIES(${SDL_TTF_INCLUDE_DIRS})
  FILE(GLOB FIFECHAN_CONTRIB_SRC source/fifechan/contrib/sdl/*.cpp)
  ENDIF(ENABLE_SDL_CONTRIB AND SDLTTF_FOUND)
  
  # Grouping of the source for nicer display in IDEs such as Visual Studio
  SOURCE_GROUP(source/fifechan/sdl FILES ${FIFECHAN_SDL_HEADERS} ${FIFECHAN_SDL_SRC})
  SOURCE_GROUP(souce/fifechan/contrib/sdl FILES ${FIFECHAN_SDL_CONTRIB_HEADERS} ${FIFECHAN_CONTRIB_SRC})
 
  IF(BUILD_FIFECHAN_SDL_SHARED)
    SET(FIFECHAN_SDL_LIBRARY_TYPE SHARED)
  ELSE(BUILD_FIFECHAN_SDL_SHARED)
    SET(FIFECHAN_SDL_LIBRARY_TYPE STATIC)
  ENDIF(BUILD_FIFECHAN_SDL_SHARED)
  ADD_LIBRARY(${PROJECT_NAME}_sdl ${FIFECHAN_SDL_LIBRARY_TYPE} 
	${FIFECHAN_SDL_HEADERS}
	${FIFECHAN_SDL_CONTRIB_HEADERS}
	${FIFECHAN_SDL_SRC}
	${FIFECHAN_CONTRIB_SRC})
  IF(WIN32)
    IF(MINGW)
      TARGET_LINK_LIBRARIES(${PROJECT_NAME}_sdl ${MINGW32_LIBRARY} ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} ${SDL_TTF_LIBRARY} SDL2main ${PROJECT_NAME})
    ELSE(MINGW)
      TARGET_LINK_LIBRARIES(${PROJECT_NAME}_sdl ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} ${SDL_TTF_LIBRARY} SDL2main ${PROJECT_NAME})
    ENDIF(MINGW)
  ENDIF(WIN32)
  IF(APPLE)
    TARGET_LINK_LIBRARIES(${PROJECT_NAME}_sdl ${SDL2_LIBRARY} ${SDL2_IMAGE_LIBRARY} SDL2main ${PROJECT_NAME})
  ENDIF(APPLE)
  ADD_CUSTOM_TARGET(sdllib DEPENDS ${PROJECT_NAME}_sdl) # Create symlink
  SET_TARGET_PROPERTIES(${PROJECT_NAME}_sdl PROPERTIES
    VERSION ${${PROJECT_NAME}_VERSION}
    SOVERSION ${${PROJECT_NAME}_SOVERSION}
    CLEAN_DIRECT_OUTPUT 1 # Allow creating static and shared libraries without conflict
    OUTPUT_NAME ${PROJECT_NAME}_sdl # Avoid conflicts between library and binary target names
    COMPILE_DEFINITIONS "FIFECHAN_EXTENSION_BUILD"
    )

  INSTALL(TARGETS ${PROJECT_NAME}_sdl DESTINATION lib${LIB_SUFFIX} PERMISSIONS
    OWNER_READ OWNER_WRITE OWNER_EXECUTE
    GROUP_READ GROUP_EXECUTE
    WORLD_READ WORLD_EXECUTE)
  INSTALL(FILES ${FIFECHAN_SDL_HEADERS} DESTINATION include/fifechan/sdl/)
  INSTALL(FILES ${FIFECHAN_SDL_CONTRIB_HEADERS} DESTINATION include/fifechan/contrib/sdl/)   
ENDIF(ENABLE_SDL AND SDL2_FOUND AND SDL2_IMAGE_FOUND)

MESSAGE(STATUS "Fifechan Makefiles have been generated, hooray!")
