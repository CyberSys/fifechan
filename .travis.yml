sudo: required

services:
  - docker

matrix:
  include:
    - os: ubuntu
      dist: trusty
      addons:
        apt:
          sources:
            - llvm-toolchain-trusty-5.0
          packages:
            # 7z is used for packaging (see before_deploy)
            - p7zip-full 
            - mesa-common-dev
            - libsdl2-dev
            - libsdl2-image-dev
            - libsdl2-ttf-dev
            - libfreetype6-dev
            - clang-5.0
            - llvm-5.0-dev
            - libclang-5.0-dev
            - libgle3-dev
            - cppcheck
      env:
        - MATRIX_EVAL="CC=clang-5.0 && CXX=clang++-5.0"
    - os: osx
 
language: cpp

compiler: clang

git:
  depth: 5

env:
    matrix:
      - OS=ubuntu DIST=trusty
      - OS=ubuntu DIST=precise
      - OS=ubuntu DIST=xenial
      - OS=ubuntu DIST=yakkety
      - OS=debian DIST=jessie
      - OS=debian DIST=wheezy
      - OS=debian DIST=stretch

before_install:
  - eval "${MATRIX_EVAL}"
  # install packpack
  - if [ $TRAVIS_OS_NAME == linux ]; then curl -s https://packagecloud.io/install/repositories/packpack/packpack/script.deb.sh | sudo bash; fi
  - if [ $TRAVIS_OS_NAME == linux ]; then sudo apt-get update && sudo apt-get install packpack; fi
  
  - if [ $TRAVIS_OS_NAME == osx ]; then brew update && brew install sdl2 sdl2_image sdl2_ttf freetype; fi
  # build OGLFT
  - svn checkout svn://svn.code.sf.net/p/oglft/code/trunk oglft-code
  - cd oglft-code
  # Patch CMakeLists.txt dont load shipped CMake Modul to load FreeType, its provided by CMake and able to find FreeType.
  - sed -i.bak '4d' CMakeLists.txt
  # Also include Freetype
  - sed -i.bak -e '6a\'$'\n''if(FREETYPE_FOUND)' CMakeLists.txt
  - sed -i.bak -e '7a\'$'\n''INCLUDE_DIRECTORIES(${FREETYPE_INCLUDE_DIRS})' CMakeLists.txt
  - sed -i.bak -e '8a\'$'\n''endif(FREETYPE_FOUND)' CMakeLists.txt
  # configure oglft - install into /usr folder
  - cmake -DCMAKE_CXX_FLAGS=-fPIC -DCMAKE_INSTALL_PREFIX=/usr/local . 
  # make oglft
  - make -j3
  # install oglft
  - sudo make install
  - cd ..
   
script:
  # create folder for an out-of-source-tree build
  - mkdir _build
  # switch to build folder
  - cd _build
  # call cmake to configure the build env
  - cmake .. -DENABLE_SDL_CONTRIB=ON -DENABLE_OPENGL_CONTRIB=ON -DCMAKE_INSTALL_PREFIX=/fifechan
  # finally, make
  - make -j3 VERBOSE=1
  # then install
  - sudo make install

after_script: 
   # run cppcheck only on Linux
   - if [ $TRAVIS_OS_NAME == linux ]; then cd /home/travis/build/fifengine/fifechan; fi
   - if [ $TRAVIS_OS_NAME == linux ]; then cppcheck --verbose --enable=all --std=posix --std=c++11 --quiet -I include src; fi
     # build deb packages via packpack
   - if [ $TRAVIS_OS_NAME == linux ]; then packpack; fi

before_deploy:
  - sudo ls -alh /fifechan/*
  # let's package for Linux
  - if [ $TRAVIS_OS_NAME == linux ]; then 7z a -ttar -so fifechan.tar /fifechan/* | 7z a -si fifechan-$TRAVIS_TAG.tar.gz; fi
  # let's package for Mac
  - if [ $TRAVIS_OS_NAME == osx ]; then 7z a -ttar -so fifechan.tar /fifechan/* | 7z a -si fifechan-mac-$TRAVIS_TAG.tar.gz; fi

deploy:
  - provider: releases
    api_key: 
      secure: "pWuM+6g5NjLo0mIyanHpNSWgs8f99fAqWb8ttY3YGNkiKWPmtTMZxktGdONp3dIOYykK8fHuCX2fuXNGhfv3wYllNAqbHgZ2Z6718q57xbjIplvJwdJ1+iAmmMGs1UDNyNLlMVr9y+hXzJLfIhd5/mp4+Wb3JqSDXtk+9ScV2JE="
    file: fifechan*.tar.gz          # wildcard for "fifechan-1.2.3.tar.gz" and "fifechan-mac-1.2.3.tar.gz"
    file_glob: true
    skip_cleanup: true
    overwrite: true
    on:
      tags: true
  # Deploy packages to PackageCloud
  - provider: packagecloud
    username: ${PACKAGECLOUD_USER}
    repository: ${PACKAGECLOUD_REPO}
    token: ${PACKAGECLOUD_TOKEN}
    dist: ${OS}/${DIST}
    package_glob: build/*.{deb}
    skip_cleanup: true
    on:
      branch: master
      condition: -n "${OS}" && -n "${DIST}" && -n "${PACKAGECLOUD_TOKEN}"
      tags: true

notifications:
  irc: irc.freenode.org#fife
  email: false
